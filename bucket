 class Bucket implements Sortable{
int zakres = 0;
     public int[] sort(int[] tab) {
       int max, min, b;
       int n = tab.length;
       int[] tabv2 = new int[200];
       for (int i = 0; i < n-1; i++)
       {
           if (tab[i] > tab[i+1])
           {
               b  = tab[i];
               tab[i] = tab[i+1];
               tab[i+1] = b;
           }
       }
       max = tab[n-1];// znalezienie największego elementu tablicy
         for (int i = 0; i < n-1; i++)
         {
             if (tab[i] < tab[i+1])
             {
                 b  = tab[i];
                 tab[i] = tab[i+1];
                 tab[i+1] = b;
             }
         }
         min = tab[199];// znalezienie najmniejszego elementu tablicy
         int k = 0;
         int c = 0;
         zakres = max - min;
         for (int i = min; i <= max; i++) //petla która porównuje po kolei począwszy od min do max liczby z tablica
         {
            for( int j = 0; j< n-1; j++)
            {
                if (i == tab[j]) // jesli wskaznik i(od min do max) napotka równa sobie liczbe wpisuje ja na poczatek tablicy, a element tab[k] wpisuje w miejsce znalezionej liczby
                {
                    c = tab[k];
                    tab[k] = tab[j];
                    tab[j] = c ;
                    k++;
                }

            }
         }


         return tab;
     }

     public double step_counting() {
         return zakres;
     }
 }
